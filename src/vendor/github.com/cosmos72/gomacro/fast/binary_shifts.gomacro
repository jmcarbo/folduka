/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2019 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * binary_shifts.go
 *
 *  Created on Apr 08, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/ast"
	r "reflect"
)

:package fast

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)

	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}


:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case xr.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

// shift, x type and y type are fixed
:macro shift(opnode, xconst, yconst, xtyp ast.Node) ast.Node {

	// the return type of Eval() and EvalType() varies. better check early.
	xc, yc := Eval(xconst).(bool), Eval(yconst).(bool)
	optoken := Eval(opnode).(token.Token)


	var expr *ast.BinaryExpr
	if xc == yc {
		expr = ~"{x(env) && y(env)} // quasiquote, we modify it destructively
	} else if yc {
		expr = ~"{x(env) && y} // quasiquote, we modify it destructively
	} else {
		expr = ~"{x && y(env)} // quasiquote, we modify it destructively
	}
	expr.Op = optoken
	return ~"{
		fun = func(env *Env) ~,xtyp {
			return ~,expr
		}
	}
}

// shift, x type is fixed. dispatch on y type
:macro shifts(opnode, xconst, yconst, xtyp ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	xc, yc := Eval(xconst).(bool), Eval(yconst).(bool)

	ret := ~"{shift; ~,opnode; ~,xconst; ~,yconst; ~,xtyp}

	if xc {
		xconv1 := convertvalue1(xtyp, ~'xv)
		return ~"{x := ~,xconv1; ~,ret }
	} else {
		return ~"{x := x.(func(*Env) ~,xtyp); ~,ret }
	}
}

// general shift - dispatch on x type, then on y type
:macro shiftss(opnode, xconst, yconst, xtypes ast.Node) ast.Node {
	xtypelist := xtypes.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, 0, len(xtypelist))
	foundnil := false
	for _, typ := range xtypelist {
		t := EvalType(typ)
		if t == nil {
			caselist = append(caselist, ~"{default: shifts; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			foundnil = true

		} else if t.Kind() == r.Int {
			// shortcut for all int* types
			for _, typ := range []ast.Expr{~'int, ~'int8, ~'int16, ~'int32, ~'int64} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: shifts; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else if t.Kind() == r.Uint {
			// shortcut for all uint* types
			for _, typ := range []ast.Expr{~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: shifts; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else {
			kind := makekind(typ)
			caselist = append(caselist, ~"{case ~,kind: shifts; ~,opnode; ~,xconst; ~,yconst; ~,typ})
		}
	}

	if !foundnil {
		caselist = append(caselist, ~'{default: return c.invalidBinaryExpr(node, xe, ye)})
	}
	return ~"{ switch xk { ~,@caselist } }
}


func (c *Comp) Shl(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	if ze := c.prepareShift(node, xe, ye); ze != nil {
		return ze
	}
	xc, yc := xe.Const(), ye.Const()
	xk := xe.Type.Kind()
	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x := xe.Fun
		y := ye.AsUint64()
		shiftss; token.SHL; false; false; {int; uint}
	} else if yc {
		x := xe.Fun
		y, ok := constAsUint64(ye.Value)
		if !ok {
			c.invalidBinaryExpr(node, xe, ye)
		} else if y == 0 {
			return xe
		}
		shiftss; token.SHL; false; true; {int; uint}
	} else {
		xv := xr.ValueOf(xe.Value)
		y := ye.AsUint64()
		shiftss; token.SHL; true; false; {int; uint}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Shr(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	if ze := c.prepareShift(node, xe, ye); ze != nil {
		return ze
	}
	xc, yc := xe.Const(), ye.Const()
	xk := xe.Type.Kind()
	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x := xe.Fun
		y := ye.AsUint64()
		shiftss; token.SHR; false; false; {int; uint}
	} else if yc {
		x := xe.Fun
		y, ok := constAsUint64(ye.Value)
		if !ok {
			c.invalidBinaryExpr(node, xe, ye)
		} else if y == 0 {
			return xe
		}
		shiftss; token.SHR; false; true; {int; uint}
	} else {
		xv := xr.ValueOf(xe.Value)
		y := ye.AsUint64()
		shiftss; token.SHR; true; false; {int; uint}
	}
	return exprFun(xe.Type, fun)
}
